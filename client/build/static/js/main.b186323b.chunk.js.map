{"version":3,"sources":["firebase/firebase.js","slices/authenticate.slice.js","slices/form.slice.js","components/create-button/create-button.component.jsx","components/signout-button/signout-button.component.jsx","components/header/header.component.jsx","slices/input.slice.js","components/list-item/list-item.component.jsx","components/list/list.styles.jsx","components/list/list.component.jsx","components/recipe-form/recipe-form.styles.jsx","components/recipe-form/recipe-form.component.jsx","components/recipe-url/recipe-url.styles.jsx","components/recipe-url/recipe-url.component.jsx","components/new-recipe/new-recipe.component.jsx","slices/recipe.slice.js","components/getting-started/getting-started.component.jsx","components/dropdown/dropdown.styles.jsx","components/dropdown/dropdown.component.jsx","components/saved-recipe-card/saved-recipe-card.component.jsx","components/ingredient/ingredient.component.jsx","components/full-recipe/full-recipe.component.jsx","components/recipe-list/recipe-list.component.jsx","components/sign-in/sign-in.component.jsx","components/sign-up/sign-up.component.jsx","components/reset-password/reset-password.component.jsx","assets/signin.jpg","components/authenticate/authenticate.component.jsx","components/body/body.styles.jsx","components/body/body.component.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authenticateSlice","createSlice","name","initialState","isAuthenticated","isSignIn","resetPassword","userId","credentials","email","password","conirmPassword","reducers","authenticate","state","deauthenticate","resetCredentials","setCredentials","action","payload","value","setSignIn","setResetPassword","setUserId","actions","selectIsAuthenticated","selectCredentials","selectIsSignIn","selectResetPassword","selectUserId","formSlice","isActive","isUrl","isValidated","activateForm","activateUrl","deactivateForm","deactivateUrl","validateForm","invalidateForm","selectIsFormActive","form","selectIsUrl","selectIsValidated","CreateButton","dispatch","useDispatch","menuAlign","variant","id","title","Dropdown","Item","onClick","firebaseAppAuth","firebaseApp","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","props","signOut","Button","Header","useSelector","Navbar","fixed","className","bg","expand","Brand","href","inputSlice","ingredientExists","ingredient","fractions","allRecipesUrl","fullRecipe","imageUrl","description","ingredients","directions","addIngredient","length","includes","document","querySelector","deleteIngredient","filter","resetIngredient","resetIngredientExists","setIngredient","Object","entries","key","replace","setHovered","item","isHovered","setUrl","setFullRecipe","clearForm","setAllRecipesUrl","selectIngredient","input","selectIngredients","selectFullRecipe","selectIngredientExists","ListItem","ListGroup","Close","style","float","color","cursor","fontSize","ListContainer","styled","div","List","map","idx","AlertContainer","ButtonGroupContainer","ButtonContainer","RecipeForm","setTimeout","itemsRef","database","ref","child","Container","Row","Col","md","Card","as","Body","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","push","Group","Label","Control","onChange","target","type","placeholder","required","Feedback","htmlFor","InputGroup","Prepend","Text","FormControl","aria-describedby","controlid","rows","onKeyPress","aria-label","Append","borderRadius","Add","Alert","RecipeUrl","useState","url","marginTop","fetch","then","res","json","data","result","controlId","NewRecipe","recipeSlice","recipe","isOpen","recipes","loadRecipes","openRecipe","closeRecipe","selectRecipes","selectRecipe","GettingStarted","xl","Title","marginBottom","marginRight","marginLeft","DropdownButton","itemRef","drop","ButtonGroup","width","Toggle","padding","size","Menu","remove","SavedRecipeCard","Img","height","objectFit","src","Ingredient","checked","setChecked","display","textDecoration","Check","FullRecipe","Table","hover","striped","split","step","RecipeList","xs","lg","CardColumns","signInWithEmailAndPassword","signInWithGoogle","user","textAlign","block","createUserWithEmailAndPassword","doesNotMatch","setDoesNotMatch","confirmPassword","resetEmail","emailSent","setEmailSent","Authenticate","sm","Image","fluid","image","rounded","BodyContainer","isLoading","setIsLoading","isFormActive","Spinner","position","top","left","animation","useEffect","uid","on","snapshot","items","val","newState","configureStore","reducer","inputReducer","formReducer","recipeReducer","authenticateReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b186323b.chunk.js","sourcesContent":["/** @format */\n\nimport firebase from \"firebase\";\nconst config = {\n  apiKey: \"AIzaSyBB1V0nXw9x3HjcdUEfogIwu9z5pTOSw7w\",\n  authDomain: \"recipeas-89ec5.firebaseapp.com\",\n  databaseURL: \"https://recipeas-89ec5-default-rtdb.firebaseio.com\",\n  projectId: \"recipeas-89ec5\",\n  storageBucket: \"recipeas-89ec5.appspot.com\",\n  messagingSenderId: \"202902121548\",\n  appId: \"1:202902121548:web:c48cf60578762f396318e9\",\n  measurementId: \"G-BTL7T8SJZJ\",\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const authenticateSlice = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    isAuthenticated: false,\n    isSignIn: true,\n    resetPassword: false,\n    userId: \"\",\n    credentials: {\n      email: \"\",\n      password: \"\",\n      conirmPassword: \"\",\n    },\n  },\n  reducers: {\n    authenticate: (state) => {\n      state.isAuthenticated = true;\n    },\n    deauthenticate: (state) => {\n      state.isAuthenticated = false;\n    },\n    resetCredentials: (state) => {\n      state.credentials = { email: \"\", password: \"\", conirmPassword: \"\" };\n    },\n    setCredentials: (state, action) => {\n      const { value, name } = action.payload;\n      state.credentials = { ...state.credentials, [name]: value };\n    },\n    setSignIn: (state) => {\n      state.isSignIn = !state.isSignIn;\n    },\n    setResetPassword: (state) => {\n      state.resetPassword = !state.resetPassword;\n    },\n    setUserId: (state, action) => {\n      state.userId = action.payload;\n    },\n  },\n});\n\nexport const {\n  authenticate,\n  deauthenticate,\n  resetCredentials,\n  setCredentials,\n  setResetPassword,\n  setSignIn,\n  setUserId,\n} = authenticateSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsAuthenticated = (state) =>\n  state.authenticate.isAuthenticated;\nexport const selectCredentials = (state) => state.authenticate.credentials;\nexport const selectIsSignIn = (state) => state.authenticate.isSignIn;\nexport const selectResetPassword = (state) => state.authenticate.resetPassword;\nexport const selectUserId = (state) => state.authenticate.userId;\n\nexport default authenticateSlice.reducer;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    isActive: false,\n    isUrl: false,\n    isValidated: true,\n  },\n  reducers: {\n    activateForm: (state) => {\n      state.isActive = true;\n    },\n    activateUrl: (state) => {\n      state.isUrl = true;\n    },\n    deactivateForm: (state) => {\n      state.isActive = false;\n    },\n    deactivateUrl: (state) => {\n      state.isUrl = false;\n    },\n    validateForm: (state) => {\n      state.isValidated = true;\n    },\n    invalidateForm: (state) => {\n      state.isValidated = false;\n    },\n  },\n});\n\nexport const {\n  activateForm,\n  activateUrl,\n  deactivateForm,\n  deactivateUrl,\n  validateForm,\n  invalidateForm,\n} = formSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsFormActive = (state) => state.form.isActive;\nexport const selectIsUrl = (state) => state.form.isUrl;\nexport const selectIsValidated = (state) => state.form.isValidated;\n\nexport default formSlice.reducer;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  activateForm,\n  activateUrl,\n  deactivateUrl,\n} from \"../../slices/form.slice\";\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\n\nconst CreateButton = () => {\n  const dispatch = useDispatch();\n  return (\n    <DropdownButton\n      menuAlign=\"right\"\n      variant=\"outline-primary\"\n      id=\"dropdown-basic-button\"\n      title=\"Create Recipe\"\n    >\n      <Dropdown.Item\n        onClick={() => {\n          dispatch(activateForm());\n          dispatch(activateUrl());\n        }}\n      >\n        allrecipes.com\n      </Dropdown.Item>\n      <Dropdown.Item\n        onClick={() => {\n          dispatch(activateForm());\n          dispatch(deactivateUrl());\n        }}\n      >\n        from scratch\n      </Dropdown.Item>\n    </DropdownButton>\n  );\n};\n\nexport default CreateButton;\n","/** @format */\n\nimport React from \"react\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseApp from \"../../firebase/firebase\";\nimport { useDispatch } from \"react-redux\";\nimport { deauthenticate } from \"../../slices/authenticate.slice\";\nimport { Button } from \"react-bootstrap\";\n\nconst SignoutButton = (props) => {\n  const dispatch = useDispatch();\n  const { signOut } = props;\n  return (\n    <Button\n      onClick={() => {\n        signOut();\n        dispatch(deauthenticate());\n      }}\n      variant=\"outline-info\"\n    >\n      Sign Out\n    </Button>\n  );\n};\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(SignoutButton);\n","/** @format */\n\nimport React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectIsAuthenticated } from \"../../slices/authenticate.slice\";\nimport { Navbar } from \"react-bootstrap\";\nimport CreateButton from \"../create-button/create-button.component\";\nimport SignoutButton from \"../signout-button/signout-button.component\";\n\nconst Header = () => {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  return (\n    <Navbar\n      fixed=\"top\"\n      className=\"justify-content-between\"\n      bg=\"light\"\n      expand=\"lg\"\n    >\n      <Navbar.Brand href=\"#home\">Recipeas</Navbar.Brand>\n      {isAuthenticated ? <CreateButton /> : null}\n      {isAuthenticated ? <SignoutButton /> : null}\n    </Navbar>\n  );\n};\n\nexport default Header;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\",\n    },\n    allRecipesUrl: \"\",\n    fullRecipe: {\n      imageUrl: \"\",\n      title: \"\",\n      description: \"\",\n      ingredients: [],\n      directions: \"\",\n    },\n  },\n  reducers: {\n    addIngredient: (state) => {\n      if (\n        state.ingredient.length > 0 &&\n        !state.fullRecipe.ingredients.includes(state.ingredient)\n      ) {\n        state.fullRecipe.ingredients = [\n          ...state.fullRecipe.ingredients,\n          state.ingredient,\n        ];\n        state.ingredient = \"\";\n      } else if (state.fullRecipe.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n      document.querySelector(\"#ingredients\").value = \"\";\n    },\n    deleteIngredient: (state, action) => {\n      state.fullRecipe.ingredients = [\n        ...state.fullRecipe.ingredients.filter(\n          (ingredient) => ingredient !== action.payload\n        ),\n      ];\n    },\n    resetIngredient: (state) => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: (state) => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setHovered: (state) => {\n      state.item.isHovered = !state.item.isHovered;\n    },\n    setUrl: (state, action) => {\n      const { value, name } = action.payload;\n      state.fullRecipe = {\n        ...state.fullRecipe,\n        [name]: \"https://\" + value.replace(\"https://\", \"\"),\n      };\n    },\n\n    setFullRecipe: (state, action) => {\n      const { value, name } = action.payload;\n      state.fullRecipe = { ...state.fullRecipe, [name]: value };\n    },\n    clearForm: (state) => {\n      state.ingredient = \"\";\n      state.fullRecipe = {\n        imageUrl: \"\",\n        title: \"\",\n        description: \"\",\n        ingredients: [],\n        directions: \"\",\n      };\n    },\n  },\n});\n\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setAllRecipesUrl,\n  setIngredient,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  setFullRecipe,\n  clearForm,\n} = inputSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIngredient = (state) => state.input.ingredient;\nexport const selectIngredients = (state) => state.input.fullRecipe.ingredients;\nexport const selectFullRecipe = (state) => state.input.fullRecipe;\nexport const selectIngredientExists = (state) => state.input.ingredientExists;\nexport const selectAllRecipesUrl = (state) => state.input.allRecipesUrl;\n\nexport default inputSlice.reducer;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteIngredient } from \"../../slices/input.slice\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Close } from \"@material-ui/icons\";\n\nconst ListItem = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <ListGroup.Item>\n      {props.ingredient}\n      <Close\n        onClick={() => {\n          dispatch(deleteIngredient(props.ingredient));\n        }}\n        style={{ float: \"right\", color: \"#6c757d\", cursor: \"pointer\" }}\n        fontSize=\"small\"\n      />\n    </ListGroup.Item>\n  );\n};\n\nexport default ListItem;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const ButtonContainer = styled.div`\n  float: right;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIngredients } from \"../../slices/input.slice\";\nimport { ListGroup } from \"react-bootstrap\";\nimport ListItem from \"../list-item/list-item.component\";\nimport { ListContainer } from \"./list.styles\";\n\nconst List = () => {\n  const ingredients = useSelector(selectIngredients);\n  return (\n    <ListContainer>\n      <ListGroup variant=\"flush\">\n        {ingredients.map((ingredient, idx) => (\n          <ListItem key={idx} ingredient={ingredient} />\n        ))}\n      </ListGroup>\n    </ListContainer>\n  );\n};\n\nexport default List;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const AlertContainer = styled.div`\n  margin-top: 0.75rem;\n`;\n\nexport const ListContainer = styled.div`\n  margin-top: 0.75rem;\n`;\n\nexport const ButtonGroupContainer = styled.div`\n  float: right;\n  display: flex;\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-right: 0.5rem;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport firebase from \"../../firebase/firebase\";\nimport { selectUserId } from \"../../slices/authenticate.slice\";\nimport {\n  addIngredient,\n  setIngredient,\n  setFullRecipe,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  selectFullRecipe,\n  selectIngredient,\n  selectIngredientExists,\n  clearForm,\n} from \"../../slices/input.slice\";\nimport {\n  deactivateForm,\n  validateForm,\n  invalidateForm,\n  selectIsValidated,\n} from \"../../slices/form.slice\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  InputGroup,\n  Form,\n  FormControl,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport List from \"../list/list.component\";\n\nimport {\n  ButtonGroupContainer,\n  ButtonContainer,\n  AlertContainer,\n  ListContainer,\n} from \"./recipe-form.styles\";\n\nimport { Add } from \"@material-ui/icons\";\n\nconst RecipeForm = () => {\n  const dispatch = useDispatch();\n  const userId = useSelector(selectUserId);\n  const isFormValidated = useSelector(selectIsValidated);\n  const ingredient = useSelector(selectIngredient);\n  const ingredientExists = useSelector(selectIngredientExists);\n  if (ingredientExists) {\n    setTimeout(() => {\n      dispatch(resetIngredient());\n      dispatch(resetIngredientExists());\n    }, 1750);\n  }\n\n  const fullRecipe = useSelector(selectFullRecipe);\n  const itemsRef = firebase\n    .database()\n    .ref(\"users\")\n    .child(userId)\n    .child(\"items\");\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      dispatch(invalidateForm());\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      dispatch(validateForm());\n      itemsRef.push(fullRecipe);\n      dispatch(clearForm());\n      dispatch(deactivateForm());\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col md={8}>\n          <Card>\n            <Card.Header as=\"h5\">New Recipe</Card.Header>\n            <Card.Body>\n              <Form\n                noValidate\n                // validated={!isFormValidated}\n                onSubmit={handleSubmit}\n              >\n                <Form.Group>\n                  <Form.Label>Recipe Name</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    placeholder=\"Add the name of your recipe here\"\n                    name=\"title\"\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter a recipe name.\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <label htmlFor=\"basic-url\">Image URL</label>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"basic-addon3\">\n                      https://\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    onChange={(event) => {\n                      dispatch(setUrl(event.target));\n                    }}\n                    type=\"text\"\n                    name=\"imageUrl\"\n                    id=\"basic-url\"\n                    aria-describedby=\"basic-addon3\"\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter an image URL.\n                  </Form.Control.Feedback>\n                </InputGroup>\n\n                <Form.Group controlid=\"exampleForm.ControlTextarea1\">\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    placeholder=\"Add your description here\"\n                    name=\"description\"\n                    as=\"textarea\"\n                    rows={2}\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter a recipe description.\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <label>Ingredients</label>\n                <InputGroup className=\"mb-1\">\n                  <FormControl\n                    onChange={(event) => {\n                      dispatch(setIngredient(event.target));\n                    }}\n                    onKeyPress={(event) => {\n                      if (event.key === \"Enter\") {\n                        dispatch(addIngredient());\n                      }\n                    }}\n                    id=\"ingredients\"\n                    type=\"text\"\n                    placeholder=\"Add ingredients here\"\n                    name=\"ingredients\"\n                    aria-label=\"Ingredients list\"\n                    aria-describedby=\"basic-addon2\"\n                    value={ingredient}\n                    // required\n                  />\n\n                  <InputGroup.Append>\n                    <Button\n                      style={{ borderRadius: \"0 0.25rem 0.25rem 0\" }}\n                      onClick={() => {\n                        dispatch(addIngredient());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      <Add fontSize=\"small\" />\n                    </Button>\n                  </InputGroup.Append>\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please add at least one ingredient.\n                  </Form.Control.Feedback>\n                </InputGroup>\n                {ingredientExists ? (\n                  <AlertContainer>\n                    <Alert variant=\"warning\">\n                      You've already entered <strong>{ingredient}</strong>\n                    </Alert>\n                  </AlertContainer>\n                ) : null}\n                <ListContainer>\n                  <List />\n                </ListContainer>\n                <Form.Group controlid=\"exampleForm.ControlTextarea3\">\n                  <Form.Label>Directions</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    name=\"directions\"\n                    as=\"textarea\"\n                    rows={8}\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please add the directions\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <ButtonGroupContainer>\n                  <ButtonContainer>\n                    <Button\n                      onClick={() => {\n                        dispatch(validateForm());\n                        dispatch(deactivateForm());\n                        dispatch(clearForm());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonContainer>\n                  <Button variant=\"outline-primary\" type=\"submit\">\n                    Save\n                  </Button>\n                </ButtonGroupContainer>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RecipeForm;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ButtonGroupContainer = styled.div`\n  float: right;\n  display: flex;\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-right: 0.5rem;\n`;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport firebase from \"../../firebase/firebase\";\nimport { selectUserId } from \"../../slices/authenticate.slice\";\nimport { deactivateUrl, deactivateForm } from \"../../slices/form.slice\";\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\nimport { ButtonContainer, ButtonGroupContainer } from \"./recipe-url.styles\";\n\nconst RecipeUrl = () => {\n  const [url, setUrl] = useState(\"\");\n  const userId = useSelector(selectUserId);\n  const itemsRef = firebase\n    .database()\n    .ref(\"users\")\n    .child(userId)\n    .child(\"items\");\n  const handleChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    const url_req_string =\n      \"https://recipeaz.herokuapp.com/api/\" + \"?url=\" + url;\n    fetch(url_req_string)\n      .then((res) => res.json())\n      .then((data) => {\n        itemsRef.push(data.result);\n      });\n    dispatch(deactivateForm());\n    dispatch(deactivateUrl());\n  };\n\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col md={6}>\n          <Card style={{ marginTop: \"6rem\" }}>\n            <Card.Header as=\"h5\">New recipe</Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Recipe URL</Form.Label>\n                  <Form.Control\n                    onChange={handleChange}\n                    placeholder=\"Enter the URL of the allrecipes.com recipe\"\n                  />\n                </Form.Group>\n\n                <ButtonGroupContainer>\n                  <ButtonContainer>\n                    <Button\n                      onClick={() => {\n                        dispatch(deactivateForm());\n                        dispatch(deactivateUrl());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonContainer>\n                  <Button type=\"submit\" variant=\"outline-primary\">\n                    Save\n                  </Button>\n                </ButtonGroupContainer>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RecipeUrl;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsUrl } from \"../../slices/form.slice\";\nimport RecipeForm from \"../recipe-form/recipe-form.component\";\nimport RecipeUrl from \"../recipe-url/recipe-url.component\";\n\nconst NewRecipe = () => {\n  const isUrl = useSelector(selectIsUrl);\n  return isUrl ? <RecipeUrl /> : <RecipeForm />;\n};\n\nexport default NewRecipe;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState: {\n    recipe: {\n      isOpen: false,\n      fullRecipe: {},\n    },\n    recipes: [],\n  },\n  reducers: {\n    loadRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    openRecipe: (state, action) => {\n      state.recipe.isOpen = true;\n      state.recipe.fullRecipe = action.payload;\n    },\n    closeRecipe: (state) => {\n      state.recipe.isOpen = false;\n      state.recipe.fullRecipe = \"\";\n    },\n  },\n});\n\nexport const { loadRecipes, openRecipe, closeRecipe } = recipeSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectRecipes = (state) => state.recipe.recipes;\nexport const selectRecipe = (state) => state.recipe.recipe;\n\nexport default recipeSlice.reducer;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport {\n  activateForm,\n  activateUrl,\n  deactivateUrl,\n} from \"../../slices/form.slice\";\n\nconst GettingStarted = () => {\n  const dispatch = useDispatch();\n  return (\n    <Row className=\"justify-content-center\">\n      <Col md={6} xl={4}>\n        <Card style={{ marginTop: \"6rem\" }} className=\"text-center\">\n          <Card.Header>Getting Started</Card.Header>\n          <Card.Body>\n            <Card.Title style={{ marginBottom: \"0.5rem\" }}>\n              Create New Recipe\n            </Card.Title>\n            <Card.Text style={{ marginBottom: \"1.5rem\" }}>\n              Get started by creating a recipe\n            </Card.Text>\n            <Button\n              variant=\"outline-primary\"\n              onClick={() => {\n                dispatch(activateForm());\n                dispatch(activateUrl());\n              }}\n              style={{ marginRight: \"0.25rem\", marginBottom: \"1rem\" }}\n            >\n              allrecipes.com\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => {\n                dispatch(activateForm());\n                dispatch(deactivateUrl());\n              }}\n              style={{ marginLeft: \"0.25rem\", marginBottom: \"1rem\" }}\n            >\n              from scratch\n            </Button>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default GettingStarted;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ButtonContainer = styled.div`\n  position: absolute;\n  top: 1.25rem;\n  right: 1.25rem;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { closeRecipe } from \"../../slices/recipe.slice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserId } from \"../../slices/authenticate.slice\";\nimport firebase from \"../../firebase/firebase\";\nimport { Dropdown, ButtonGroup } from \"react-bootstrap\";\nimport { ButtonContainer } from \"./dropdown.styles\";\n\nconst DropdownButton = (props) => {\n  const userId = useSelector(selectUserId);\n  const dispatch = useDispatch();\n  const itemRef = firebase\n    .database()\n    .ref(\"users\")\n    .child(userId)\n    .child(\"items\")\n    .child(props.id);\n  return (\n    <ButtonContainer>\n      <Dropdown drop=\"down\" as={ButtonGroup} style={{ width: \"100%\" }}>\n        <Dropdown.Toggle\n          style={{\n            padding: \".25rem .65rem\",\n          }}\n          variant=\"dark\"\n          size=\"sm\"\n        ></Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={() => {\n              itemRef.remove();\n              dispatch(closeRecipe());\n            }}\n          >\n            Delete Recipe\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </ButtonContainer>\n  );\n};\n\nexport default DropdownButton;\n","/** @format */\n\nimport React from \"react\";\nimport firebase from \"../../firebase/firebase\";\nimport { useDispatch } from \"react-redux\";\nimport { openRecipe } from \"../../slices/recipe.slice\";\nimport { Card, Button } from \"react-bootstrap\";\n\nimport { MoreHoriz } from \"@material-ui/icons\";\nimport DropdownButton from \"../dropdown/dropdown.component\";\n\nconst SavedRecipeCard = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <Card>\n      <DropdownButton id={props.id} />\n      <Card.Img\n        style={{ height: \"20rem\", objectFit: \"cover\" }}\n        variant=\"top\"\n        src={props.imageUrl}\n      />\n\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n\n        <Card.Text>{props.description}</Card.Text>\n\n        <Button\n          style={{ width: \"100%\" }}\n          variant=\"outline-primary\"\n          onClick={() => {\n            dispatch(openRecipe(props));\n          }}\n        >\n          Open Recipe\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default SavedRecipeCard;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst Ingredient = (props) => {\n  const [checked, setChecked] = useState(false);\n\n  const handleClick = () => {\n    setChecked(!checked);\n  };\n  return (\n    <tr>\n      <td\n        style={\n          checked\n            ? {\n                display: \"flex\",\n                textDecoration: \"line-through\",\n              }\n            : { display: \"flex\" }\n        }\n      >\n        <Form.Check onClick={handleClick} type=\"checkbox\" />\n        {props.ingredient}\n      </td>\n    </tr>\n  );\n};\n\nexport default Ingredient;\n","\n/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { closeRecipe } from \"../../slices/recipe.slice\";\nimport { Button, Card, Col, Container, Row, Table } from \"react-bootstrap\";\nimport DropdownButton from \"../dropdown/dropdown.component\";\nimport Ingredient from \"../ingredient/ingredient.component\";\n\nconst FullRecipe = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col xl={7}>\n          <Card>\n            <DropdownButton id={props.id} />\n            <Card.Img\n              style={{ height: \"25rem\", objectFit: \"cover\",}}\n              variant=\"top\"\n              src={props.imageUrl}\n            />\n            <Card.Body>\n              <h4>{props.title}</h4>\n              <p>{props.description}</p>\n              {props.ingredients ? (\n                <Table hover size=\"sm\">\n                  <thead>\n                    <th>Ingredients</th>\n                  </thead>\n                  <tbody>\n                    {props.ingredients.map((ingredient, idx) => (\n                      <Ingredient key={idx} ingredient={ingredient} />\n                    ))}\n                  </tbody>\n                </Table>\n              ) : null}\n              <Table striped size=\"sm\">\n                <thead>\n                  <th>Directions</th>\n                </thead>\n                <tbody>\n                  {props.directions.split(\"\\n\").map((step, idx) => (\n                    <tr>\n                      <td key={idx}>{step}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n\n              <Button\n                style={{ width: \"100%\" }}\n                variant=\"outline-primary\"\n                onClick={() => {\n                  dispatch(closeRecipe());\n                }}\n              >\n                Close Recipe\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default FullRecipe;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectRecipe, selectRecipes } from \"../../slices/recipe.slice\";\nimport { CardColumns, Col, Row } from \"react-bootstrap\";\nimport GettingStarted from \"../getting-started/getting-started.component\";\nimport SavedRecipeCard from \"../saved-recipe-card/saved-recipe-card.component\";\nimport FullRecipe from \"../full-recipe/full-recipe.component\";\n\nconst RecipeList = () => {\n  const recipes = useSelector(selectRecipes);\n  const recipe = useSelector(selectRecipe);\n  return (\n    <Row className=\"justify-content-center\">\n      <Col xs={11} lg={10}>\n        {!recipes.length > 0 ? (\n          <GettingStarted />\n        ) : recipe.isOpen ? (\n          <FullRecipe\n            id={recipe.fullRecipe.id}\n            title={recipe.fullRecipe.title}\n            imageUrl={recipe.fullRecipe.imageUrl}\n            description={recipe.fullRecipe.description}\n            ingredients={recipe.fullRecipe.ingredients}\n            directions={recipe.fullRecipe.directions}\n          />\n        ) : (\n          <CardColumns>\n            {recipes.map((recipe, idx) => (\n              <SavedRecipeCard\n                key={idx}\n                id={recipe.id}\n                title={recipe.title}\n                imageUrl={recipe.imageUrl}\n                description={recipe.description}\n                ingredients={recipe.ingredients}\n                directions={recipe.directions}\n              />\n            ))}\n          </CardColumns>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default RecipeList;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseApp from \"../../firebase/firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  authenticate,\n  selectCredentials,\n  resetCredentials,\n  setCredentials,\n  setSignIn,\n} from \"../../slices/authenticate.slice\";\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\n\nconst SignUp = (props) => {\n  const { signInWithEmailAndPassword, signInWithGoogle, user } = props;\n  const credentials = useSelector(selectCredentials);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    signInWithEmailAndPassword(credentials.email, credentials.password);\n    setTimeout(() => {\n      dispatch(resetCredentials());\n    }, 1000);\n  };\n  const dispatch = useDispatch();\n  if (user) {\n    dispatch(authenticate());\n  }\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col>\n          <Card>\n            <Card.Header style={{ textAlign: \"center\" }} as=\"h5\">\n              Sign In\n            </Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setCredentials(event.target));\n                    }}\n                    name=\"email\"\n                    type=\"email\"\n                    value={credentials.email}\n                    placeholder=\"Enter email\"\n                  />\n                </Form.Group>\n\n                <Form.Group\n                  style={{ marginBottom: \"0.25rem\" }}\n                  controlId=\"formBasicPassword\"\n                >\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setCredentials(event.target));\n                    }}\n                    name=\"password\"\n                    type=\"password\"\n                    value={credentials.password}\n                    placeholder=\"Password\"\n                  />\n                </Form.Group>\n                {/* <Button\n                  style={{ fontSize: \"1rem\" }}\n                  onClick={() => {\n                    dispatch(setResetPassword());\n                  }}\n                  block\n                  variant=\"link\"\n                >\n                  Forgot password?\n                </Button> */}\n                <Button\n                  className=\"mt-3\"\n                  block\n                  variant=\"outline-primary\"\n                  type=\"submit\"\n                >\n                  Sign In\n                </Button>\n\n                <Button\n                  onClick={signInWithGoogle}\n                  className=\"mt-3\"\n                  block\n                  variant=\"outline-secondary\"\n                >\n                  Continue with Google\n                </Button>\n\n                <Button\n                  onClick={() => {\n                    dispatch(setSignIn());\n                  }}\n                  className=\"mt-3\"\n                  block\n                  variant=\"light\"\n                >\n                  Don't have an account? Sign up\n                </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(SignUp);\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseApp from \"../../firebase/firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  authenticate,\n  selectCredentials,\n  resetCredentials,\n  setCredentials,\n  setSignIn,\n} from \"../../slices/authenticate.slice\";\nimport {\n  Alert,\n  Container,\n  Row,\n  Col,\n  Card,\n  Form,\n  Button,\n} from \"react-bootstrap\";\n\nconst SignUp = (props) => {\n  const { createUserWithEmailAndPassword, signInWithGoogle, user } = props;\n  const credentials = useSelector(selectCredentials);\n  const [doesNotMatch, setDoesNotMatch] = useState(false);\n  if (doesNotMatch) {\n    setTimeout(() => {\n      setDoesNotMatch(false);\n    }, 1750);\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (credentials.password !== credentials.confirmPassword) {\n      setDoesNotMatch(true);\n    } else {\n      createUserWithEmailAndPassword(credentials.email, credentials.password);\n      setTimeout(() => {\n        dispatch(resetCredentials());\n      }, 1000);\n    }\n  };\n  const dispatch = useDispatch();\n  if (user) {\n    dispatch(authenticate());\n  }\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col>\n          <Card>\n            <Card.Header style={{ textAlign: \"center\" }} as=\"h5\">\n              Sign Up\n            </Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setCredentials(event.target));\n                    }}\n                    name=\"email\"\n                    type=\"email\"\n                    value={credentials.email}\n                    placeholder=\"Enter email\"\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setCredentials(event.target));\n                    }}\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Confirm password</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setCredentials(event.target));\n                    }}\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Group>\n                {doesNotMatch ? (\n                  <Alert variant=\"warning\">The passwords do not match</Alert>\n                ) : null}\n\n                <Button\n                  className=\"mt-3\"\n                  block\n                  variant=\"outline-primary\"\n                  type=\"submit\"\n                >\n                  Sign Up\n                </Button>\n                <Button\n                  onClick={signInWithGoogle}\n                  className=\"mt-3\"\n                  block\n                  variant=\"outline-secondary\"\n                >\n                  Continue with Google\n                </Button>\n                <Button\n                  onClick={() => {\n                    dispatch(setSignIn());\n                  }}\n                  className=\"mt-3\"\n                  block\n                  variant=\"light\"\n                >\n                  Already have an account? Sign in\n                </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(SignUp);\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseApp from \"../../firebase/firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectCredentials,\n  setCredentials,\n  setResetPassword,\n} from \"../../slices/authenticate.slice\";\nimport {\n  Alert,\n  Container,\n  Row,\n  Col,\n  Card,\n  Form,\n  Button,\n} from \"react-bootstrap\";\n\nconst ResetPassword = (props) => {\n  const { resetEmail } = props;\n  const credentials = useSelector(selectCredentials);\n  const [emailSent, setEmailSent] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setTimeout(() => {\n      setEmailSent(true);\n    }, 1000);\n    setTimeout(() => {\n      setEmailSent(false);\n    }, 1000);\n\n    dispatch(setResetPassword());\n  };\n  const dispatch = useDispatch();\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col>\n          <Card>\n            <Card.Header style={{ textAlign: \"center\" }} as=\"h5\">\n              Reset Password\n            </Card.Header>\n            <Card.Body>\n              {emailSent ? (\n                <Alert variant=\"success\">\n                  An email has been sent to reset your password\n                </Alert>\n              ) : (\n                <Form onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control\n                      onChange={(event) => {\n                        dispatch(setCredentials(event.target));\n                      }}\n                      name=\"email\"\n                      type=\"email\"\n                      value={credentials.email}\n                      placeholder=\"Enter email\"\n                    />\n                  </Form.Group>\n\n                  <Button\n                    className=\"mt-2\"\n                    block\n                    variant=\"outline-primary\"\n                    type=\"submit\"\n                  >\n                    Reset Password\n                  </Button>\n                </Form>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(ResetPassword);\n","export default __webpack_public_path__ + \"static/media/signin.089071fd.jpg\";","/** @format */\n\nimport React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport {\n  selectIsSignIn,\n  selectResetPassword,\n} from \"../../slices/authenticate.slice\";\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\nimport SignIn from \"../sign-in/sign-in.component\";\nimport SignUp from \"../sign-up/sign-up.component\";\nimport ResetPassword from \"../reset-password/reset-password.component\";\nimport image from \"../../assets/signin.jpg\";\n\nconst Authenticate = () => {\n  const isSignIn = useSelector(selectIsSignIn);\n  const resetPassword = useSelector(selectResetPassword);\n\n  return (\n    <Container\n      style={{\n        marginTop: \"175px\",\n      }}\n    >\n      <Row className=\"justify-content-center\">\n        <Col xs={11} sm={10} md={8} style={{ marginBottom: \"3rem\" }}>\n          <Image fluid src={image} rounded />\n        </Col>\n        <Col xs={12} sm={10} md={8} lg={4}>\n          {!isSignIn ? (\n            <SignUp />\n          ) : !resetPassword ? (\n            <SignIn />\n          ) : (\n            <ResetPassword />\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Authenticate;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const BodyContainer = styled.div`\n  margin-top: 100px;\n  margin-bottom: 100px;\n`;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsAuthenticated } from \"../../slices/authenticate.slice\";\nimport { selectIsFormActive } from \"../../slices/form.slice\";\nimport NewRecipe from \"../new-recipe/new-recipe.component\";\nimport RecipeList from \"../recipe-list/recipe-list.component\";\nimport Authenticate from \"../authenticate/authenticate.component\";\nimport { Spinner } from \"react-bootstrap\";\nimport { BodyContainer } from \"./body.styles\";\n\nconst Body = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const isFormActive = useSelector(selectIsFormActive);\n\n  setTimeout(() => {\n    setIsLoading(false);\n  }, 500);\n\n  return (\n    <BodyContainer>\n      {isLoading ? (\n        <Spinner\n          style={{ position: \"absolute\", top: \"45%\", left: \"50%\" }}\n          animation=\"border\"\n          variant=\"primary\"\n        />\n      ) : !isAuthenticated ? (\n        <Authenticate />\n      ) : !isFormActive ? (\n        <RecipeList />\n      ) : (\n        <NewRecipe />\n      )}\n    </BodyContainer>\n  );\n};\n\nexport default Body;\n","/** @format */\n\nimport React from \"react\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseApp from \"./firebase/firebase\";\nimport Header from \"./components/header/header.component\";\nimport Body from \"./components/body/body.component\";\nimport { useEffect } from \"react\";\n\nimport { loadRecipes } from \"./slices/recipe.slice\";\nimport { setUserId } from \"./slices/authenticate.slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst App = (props) => {\n  const { user } = props;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (user) {\n      dispatch(setUserId(user.uid));\n      const itemsRef = firebaseApp\n        .database()\n        .ref(\"users\")\n        .child(user.uid)\n        .child(\"items\");\n      itemsRef.on(\"value\", (snapshot) => {\n        let items = snapshot.val();\n        let newState = [];\n        for (let item in items) {\n          newState.push({\n            id: item,\n            title: items[item].title,\n            imageUrl: items[item].imageUrl,\n            description: items[item].description,\n            ingredients: items[item].ingredients,\n            directions: items[item].directions,\n          });\n        }\n        dispatch(loadRecipes(newState));\n      });\n    }\n  });\n  return (\n    <div>\n      <Header />\n      <Body />\n    </div>\n  );\n};\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n","/** @format */\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport authenticateReducer from \"../slices/authenticate.slice\";\r\nimport inputReducer from \"../slices/input.slice\";\r\nimport formReducer from \"../slices/form.slice\";\r\nimport recipeReducer from \"../slices/recipe.slice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    input: inputReducer,\r\n    form: formReducer,\r\n    recipe: recipeReducer,\r\n    authenticate: authenticateReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}