{"ast":null,"code":"import _defineProperty from\"/Users/atorenherrinton/Development/recipeas/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/atorenherrinton/Development/recipeas/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/** @format */import{createSlice}from\"@reduxjs/toolkit\";export var authenticateSlice=createSlice({name:\"authenticate\",initialState:{isAuthenticated:false,isSignIn:true,resetPassword:false,userId:\"\",credentials:{email:\"\",password:\"\",conirmPassword:\"\"}},reducers:{authenticate:function authenticate(state){state.isAuthenticated=true;},deauthenticate:function deauthenticate(state){state.isAuthenticated=false;},resetCredentials:function resetCredentials(state){state.credentials={email:\"\",password:\"\",conirmPassword:\"\"};},setCredentials:function setCredentials(state,action){var _action$payload=action.payload,value=_action$payload.value,name=_action$payload.name;state.credentials=_objectSpread(_objectSpread({},state.credentials),{},_defineProperty({},name,value));},setSignIn:function setSignIn(state){state.isSignIn=!state.isSignIn;},setResetPassword:function setResetPassword(state){state.resetPassword=!state.resetPassword;},setUserId:function setUserId(state,action){state.userId=action.payload;}}});var _authenticateSlice$ac=authenticateSlice.actions,authenticate=_authenticateSlice$ac.authenticate,deauthenticate=_authenticateSlice$ac.deauthenticate,resetCredentials=_authenticateSlice$ac.resetCredentials,setCredentials=_authenticateSlice$ac.setCredentials,setResetPassword=_authenticateSlice$ac.setResetPassword,setSignIn=_authenticateSlice$ac.setSignIn,setUserId=_authenticateSlice$ac.setUserId;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{authenticate,deauthenticate,resetCredentials,setCredentials,setResetPassword,setSignIn,setUserId};export var selectIsAuthenticated=function selectIsAuthenticated(state){return state.authenticate.isAuthenticated;};export var selectCredentials=function selectCredentials(state){return state.authenticate.credentials;};export var selectIsSignIn=function selectIsSignIn(state){return state.authenticate.isSignIn;};export var selectResetPassword=function selectResetPassword(state){return state.authenticate.resetPassword;};export var selectUserId=function selectUserId(state){return state.authenticate.userId;};export default authenticateSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/client/src/slices/authenticate.slice.js"],"names":["createSlice","authenticateSlice","name","initialState","isAuthenticated","isSignIn","resetPassword","userId","credentials","email","password","conirmPassword","reducers","authenticate","state","deauthenticate","resetCredentials","setCredentials","action","payload","value","setSignIn","setResetPassword","setUserId","actions","selectIsAuthenticated","selectCredentials","selectIsSignIn","selectResetPassword","selectUserId","reducer"],"mappings":"mVAAA,cAEA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAGD,WAAW,CAAC,CAC3CE,IAAI,CAAE,cADqC,CAE3CC,YAAY,CAAE,CACZC,eAAe,CAAE,KADL,CAEZC,QAAQ,CAAE,IAFE,CAGZC,aAAa,CAAE,KAHH,CAIZC,MAAM,CAAE,EAJI,CAKZC,WAAW,CAAE,CACXC,KAAK,CAAE,EADI,CAEXC,QAAQ,CAAE,EAFC,CAGXC,cAAc,CAAE,EAHL,CALD,CAF6B,CAa3CC,QAAQ,CAAE,CACRC,YAAY,CAAE,sBAACC,KAAD,CAAW,CACvBA,KAAK,CAACV,eAAN,CAAwB,IAAxB,CACD,CAHO,CAIRW,cAAc,CAAE,wBAACD,KAAD,CAAW,CACzBA,KAAK,CAACV,eAAN,CAAwB,KAAxB,CACD,CANO,CAORY,gBAAgB,CAAE,0BAACF,KAAD,CAAW,CAC3BA,KAAK,CAACN,WAAN,CAAoB,CAAEC,KAAK,CAAE,EAAT,CAAaC,QAAQ,CAAE,EAAvB,CAA2BC,cAAc,CAAE,EAA3C,CAApB,CACD,CATO,CAURM,cAAc,CAAE,wBAACH,KAAD,CAAQI,MAAR,CAAmB,qBACTA,MAAM,CAACC,OADE,CACzBC,KADyB,iBACzBA,KADyB,CAClBlB,IADkB,iBAClBA,IADkB,CAEjCY,KAAK,CAACN,WAAN,gCAAyBM,KAAK,CAACN,WAA/B,wBAA6CN,IAA7C,CAAoDkB,KAApD,GACD,CAbO,CAcRC,SAAS,CAAE,mBAACP,KAAD,CAAW,CACpBA,KAAK,CAACT,QAAN,CAAiB,CAACS,KAAK,CAACT,QAAxB,CACD,CAhBO,CAiBRiB,gBAAgB,CAAE,0BAACR,KAAD,CAAW,CAC3BA,KAAK,CAACR,aAAN,CAAsB,CAACQ,KAAK,CAACR,aAA7B,CACD,CAnBO,CAoBRiB,SAAS,CAAE,mBAACT,KAAD,CAAQI,MAAR,CAAmB,CAC5BJ,KAAK,CAACP,MAAN,CAAeW,MAAM,CAACC,OAAtB,CACD,CAtBO,CAbiC,CAAD,CAArC,C,0BA+CHlB,iBAAiB,CAACuB,O,CAPpBX,Y,uBAAAA,Y,CACAE,c,uBAAAA,c,CACAC,gB,uBAAAA,gB,CACAC,c,uBAAAA,c,CACAK,gB,uBAAAA,gB,CACAD,S,uBAAAA,S,CACAE,S,uBAAAA,S,CAGF;AACA;AACA;yGACA,MAAO,IAAME,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACX,KAAD,QACnCA,CAAAA,KAAK,CAACD,YAAN,CAAmBT,eADgB,EAA9B,CAEP,MAAO,IAAMsB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACZ,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAN,CAAmBL,WAA9B,EAA1B,CACP,MAAO,IAAMmB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACb,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAN,CAAmBR,QAA9B,EAAvB,CACP,MAAO,IAAMuB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACd,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAN,CAAmBP,aAA9B,EAA5B,CACP,MAAO,IAAMuB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACf,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAN,CAAmBN,MAA9B,EAArB,CAEP,cAAeN,CAAAA,iBAAiB,CAAC6B,OAAjC","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const authenticateSlice = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    isAuthenticated: false,\n    isSignIn: true,\n    resetPassword: false,\n    userId: \"\",\n    credentials: {\n      email: \"\",\n      password: \"\",\n      conirmPassword: \"\",\n    },\n  },\n  reducers: {\n    authenticate: (state) => {\n      state.isAuthenticated = true;\n    },\n    deauthenticate: (state) => {\n      state.isAuthenticated = false;\n    },\n    resetCredentials: (state) => {\n      state.credentials = { email: \"\", password: \"\", conirmPassword: \"\" };\n    },\n    setCredentials: (state, action) => {\n      const { value, name } = action.payload;\n      state.credentials = { ...state.credentials, [name]: value };\n    },\n    setSignIn: (state) => {\n      state.isSignIn = !state.isSignIn;\n    },\n    setResetPassword: (state) => {\n      state.resetPassword = !state.resetPassword;\n    },\n    setUserId: (state, action) => {\n      state.userId = action.payload;\n    },\n  },\n});\n\nexport const {\n  authenticate,\n  deauthenticate,\n  resetCredentials,\n  setCredentials,\n  setResetPassword,\n  setSignIn,\n  setUserId,\n} = authenticateSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsAuthenticated = (state) =>\n  state.authenticate.isAuthenticated;\nexport const selectCredentials = (state) => state.authenticate.credentials;\nexport const selectIsSignIn = (state) => state.authenticate.isSignIn;\nexport const selectResetPassword = (state) => state.authenticate.resetPassword;\nexport const selectUserId = (state) => state.authenticate.userId;\n\nexport default authenticateSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}