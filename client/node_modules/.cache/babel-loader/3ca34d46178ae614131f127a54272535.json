{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState: {\n    recipe: {\n      isOpen: false,\n      fullRecipe: {}\n    },\n    recipes: []\n  },\n  reducers: {\n    loadRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    openRecipe: (state, action) => {\n      state.recipe.isOpen = true;\n      state.recipe.fullRecipe = action.payload;\n    },\n    closeRecipe: state => {\n      state.recipe.isOpen = false;\n      state.recipe.fullRecipe = \"\";\n    }\n  }\n});\nexport const {\n  loadRecipes,\n  openRecipe,\n  closeRecipe\n} = recipeSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectRecipes = state => state.recipe.recipes;\nexport const selectRecipe = state => state.recipe.recipe;\nexport default recipeSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/client/src/slices/recipe.slice.js"],"names":["createSlice","recipeSlice","name","initialState","recipe","isOpen","fullRecipe","recipes","reducers","loadRecipes","state","action","payload","openRecipe","closeRecipe","actions","selectRecipes","selectRecipe","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,KADF;AAENC,MAAAA,UAAU,EAAE;AAFN,KADI;AAKZC,IAAAA,OAAO,EAAE;AALG,GAFuB;AASrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACC,OAAvB;AACD,KAHO;AAIRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACN,MAAN,CAAaC,MAAb,GAAsB,IAAtB;AACAK,MAAAA,KAAK,CAACN,MAAN,CAAaE,UAAb,GAA0BK,MAAM,CAACC,OAAjC;AACD,KAPO;AAQRE,IAAAA,WAAW,EAAGJ,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACN,MAAN,CAAaC,MAAb,GAAsB,KAAtB;AACAK,MAAAA,KAAK,CAACN,MAAN,CAAaE,UAAb,GAA0B,EAA1B;AACD;AAXO;AAT2B,CAAD,CAA/B;AAwBP,OAAO,MAAM;AAAEG,EAAAA,WAAF;AAAeI,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,IAA2Cb,WAAW,CAACc,OAA7D,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIN,KAAD,IAAWA,KAAK,CAACN,MAAN,CAAaG,OAA9C;AACP,OAAO,MAAMU,YAAY,GAAIP,KAAD,IAAWA,KAAK,CAACN,MAAN,CAAaA,MAA7C;AAEP,eAAeH,WAAW,CAACiB,OAA3B","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState: {\n    recipe: {\n      isOpen: false,\n      fullRecipe: {},\n    },\n    recipes: [],\n  },\n  reducers: {\n    loadRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    openRecipe: (state, action) => {\n      state.recipe.isOpen = true;\n      state.recipe.fullRecipe = action.payload;\n    },\n    closeRecipe: (state) => {\n      state.recipe.isOpen = false;\n      state.recipe.fullRecipe = \"\";\n    },\n  },\n});\n\nexport const { loadRecipes, openRecipe, closeRecipe } = recipeSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectRecipes = (state) => state.recipe.recipes;\nexport const selectRecipe = (state) => state.recipe.recipe;\n\nexport default recipeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}