{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\"\n    },\n    imageUrl: \"\",\n    title: \"\",\n    description: \"\",\n    ingredients: [],\n    directions: \"\"\n  },\n  reducers: {\n    addIngredient: state => {\n      if (state.ingredient.length > 0 && !state.ingredients.includes(state.ingredient)) {\n        state.ingredients = [...state.ingredients, state.ingredient];\n        state.ingredient = \"\";\n      } else if (state.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n\n      document.querySelector(\"#ingredients\").value = \"\";\n    },\n    deleteIngredient: (state, action) => {\n      state.ingredients = [...state.ingredients.filter(ingredient => ingredient !== action.payload)];\n    },\n    resetIngredient: state => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: state => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setImageUrl: (state, action) => {\n      state.imageUrl = \"https://\" + action.payload.value.replace(\"https://\", \"\");\n    },\n    setTitle: (state, action) => {\n      state.title = action.payload.value;\n    },\n    setDescription: (state, action) => {\n      state.description = action.payload.value;\n    },\n    setDirections: (state, action) => {\n      state.directions = action.payload.value;\n    },\n    clearForm: state => {\n      state.ingredient = \"\";\n      state.imageUrl = \"\";\n      state.title = \"\";\n      state.description = \"\";\n      state.ingredients = [];\n      state.directions = \"\";\n    }\n  }\n});\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setIngredient,\n  resetIngredient,\n  resetIngredientExists,\n  setImageUrl,\n  setTitle,\n  setDescription,\n  setDirections,\n  clearForm\n} = inputSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectIngredient = state => state.input.ingredient;\nexport const selectIngredients = state => state.input.ingredients;\nexport const selectFullRecipe = state => {\n  state.input.imageUrl, state.input.title, state.input.description, state.input.ingredients, state.input.directions;\n};\nexport const selectIngredientExists = state => state.input.ingredientExists;\nexport default inputSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/src/slices/input.slice.js"],"names":["createSlice","inputSlice","name","initialState","ingredientExists","ingredient","fractions","imageUrl","title","description","ingredients","directions","reducers","addIngredient","state","length","includes","document","querySelector","value","deleteIngredient","action","filter","payload","resetIngredient","resetIngredientExists","setIngredient","key","Object","entries","replace","setImageUrl","setTitle","setDescription","setDirections","clearForm","actions","selectIngredient","input","selectIngredients","selectFullRecipe","selectIngredientExists","reducer"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\",\n    },\n\n    imageUrl: \"\",\n    title: \"\",\n    description: \"\",\n    ingredients: [],\n    directions: \"\",\n  },\n  reducers: {\n    addIngredient: (state) => {\n      if (\n        state.ingredient.length > 0 &&\n        !state.ingredients.includes(state.ingredient)\n      ) {\n        state.ingredients = [...state.ingredients, state.ingredient];\n        state.ingredient = \"\";\n      } else if (state.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n      document.querySelector(\"#ingredients\").value = \"\";\n    },\n    deleteIngredient: (state, action) => {\n      state.ingredients = [\n        ...state.ingredients.filter(\n          (ingredient) => ingredient !== action.payload\n        ),\n      ];\n    },\n    resetIngredient: (state) => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: (state) => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setImageUrl: (state, action) => {\n      state.imageUrl =\n        \"https://\" + action.payload.value.replace(\"https://\", \"\");\n    },\n    setTitle: (state, action) => {\n      state.title = action.payload.value;\n    },\n    setDescription: (state, action) => {\n      state.description = action.payload.value;\n    },\n    setDirections: (state, action) => {\n      state.directions = action.payload.value;\n    },\n    clearForm: (state) => {\n      state.ingredient = \"\";\n      state.imageUrl = \"\";\n      state.title = \"\";\n      state.description = \"\";\n      state.ingredients = [];\n      state.directions = \"\";\n    },\n  },\n});\n\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setIngredient,\n  resetIngredient,\n  resetIngredientExists,\n  setImageUrl,\n  setTitle,\n  setDescription,\n  setDirections,\n  clearForm,\n} = inputSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIngredient = (state) => state.input.ingredient;\nexport const selectIngredients = (state) => state.input.ingredients;\nexport const selectFullRecipe = (state) => {\n  state.input.imageUrl, state.input.title,    state.input.description,   state.input.ingredients,    state.input.directions\n};\nexport const selectIngredientExists = (state) => state.input.ingredientExists;\n\nexport default inputSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}