{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\"\n    },\n    fullRecipe: {\n      imageUrl: \"\",\n      title: \"\",\n      description: \"\",\n      ingredients: [],\n      directions: \"\"\n    }\n  },\n  reducers: {\n    addIngredient: state => {\n      if (state.ingredient.length > 0 && !state.fullRecipe.ingredients.includes(state.ingredient)) {\n        state.fullRecipe.ingredients = [...state.fullRecipe.ingredients, state.ingredient];\n        state.ingredient = \"\";\n      } else if (state.fullRecipe.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n    },\n    deleteIngredient: (state, action) => {\n      state.fullRecipe.ingredients = [...state.fullRecipe.ingredients.filter(ingredient => ingredient !== action.payload)];\n    },\n    resetIngredient: state => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: state => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setHovered: state => {\n      state.item.isHovered = !state.item.isHovered;\n    },\n    setFullRecipe: (state, action) => {\n      const {\n        value,\n        name\n      } = action.payload;\n      state.fullRecipe = { ...state.fullRecipe,\n        [name]: value\n      };\n    },\n    clearForm: state => {\n      state.ingredient = \"\";\n      state.fullRecipe = {\n        imageUrl: \"\",\n        title: \"\",\n        description: \"\",\n        ingredients: [],\n        directions: \"\"\n      };\n    }\n  }\n});\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setAllRecipesUrl,\n  setIngredient,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  setFullRecipe,\n  clearForm\n} = inputSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectIngredient = state => state.input.ingredient;\nexport const selectIngredients = state => state.input.fullRecipe.ingredients;\nexport const selectFullRecipe = state => state.input.fullRecipe;\nexport const selectIngredientExists = state => state.input.ingredientExists;\nexport default inputSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/client/src/slices/input.slice.js"],"names":["createSlice","inputSlice","name","initialState","ingredientExists","ingredient","fractions","fullRecipe","imageUrl","title","description","ingredients","directions","reducers","addIngredient","state","length","includes","deleteIngredient","action","filter","payload","resetIngredient","resetIngredientExists","setIngredient","value","key","Object","entries","replace","setHovered","item","isHovered","setFullRecipe","clearForm","setAllRecipesUrl","setUrl","actions","selectIngredient","input","selectIngredients","selectFullRecipe","selectIngredientExists","reducer"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\",\n    },\n    fullRecipe: {\n      imageUrl: \"\",\n      title: \"\",\n      description: \"\",\n      ingredients: [],\n      directions: \"\",\n    },\n  },\n  reducers: {\n    addIngredient: (state) => {\n      if (\n        state.ingredient.length > 0 &&\n        !state.fullRecipe.ingredients.includes(state.ingredient)\n      ) {\n        state.fullRecipe.ingredients = [\n          ...state.fullRecipe.ingredients,\n          state.ingredient,\n        ];\n        state.ingredient = \"\";\n      } else if (state.fullRecipe.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n    },\n    deleteIngredient: (state, action) => {\n      state.fullRecipe.ingredients = [\n        ...state.fullRecipe.ingredients.filter(\n          (ingredient) => ingredient !== action.payload\n        ),\n      ];\n    },\n    resetIngredient: (state) => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: (state) => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setHovered: (state) => {\n      state.item.isHovered = !state.item.isHovered;\n    },\n    setFullRecipe: (state, action) => {\n      const { value, name } = action.payload;\n      state.fullRecipe = { ...state.fullRecipe, [name]: value };\n    },\n    clearForm: (state) => {\n      state.ingredient = \"\";\n      state.fullRecipe = {\n        imageUrl: \"\",\n        title: \"\",\n        description: \"\",\n        ingredients: [],\n        directions: \"\",\n      };\n    },\n  },\n});\n\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setAllRecipesUrl,\n  setIngredient,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  setFullRecipe,\n  clearForm,\n} = inputSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIngredient = (state) => state.input.ingredient;\nexport const selectIngredients = (state) => state.input.fullRecipe.ingredients;\nexport const selectFullRecipe = (state) => state.input.fullRecipe;\nexport const selectIngredientExists = (state) => state.input.ingredientExists;\n\nexport default inputSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}