{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const authenticateSlice = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    isAuthenticated: false,\n    isSignIn: true,\n    resetPassword: false,\n    userId: \"\",\n    credentials: {\n      email: \"\",\n      password: \"\",\n      conirmPassword: \"\"\n    }\n  },\n  reducers: {\n    authenticate: state => {\n      state.isAuthenticated = true;\n    },\n    deauthenticate: state => {\n      state.isAuthenticated = false;\n    },\n    setCredentials: (state, action) => {\n      const {\n        value,\n        name\n      } = action.payload;\n      state.credentials = { ...state.credentials,\n        [name]: value\n      };\n    },\n    setSignIn: state => {\n      state.isSignIn = !state.isSignIn;\n    },\n    setResetPassword: state => {\n      state.resetPassword = !state.isSignIn;\n    },\n    setUserId: (state, action) => {\n      state.userId = action.payload;\n    }\n  }\n});\nexport const {\n  authenticate,\n  deauthenticate,\n  setCredentials,\n  setResetPassword,\n  setSignIn,\n  setUserId\n} = authenticateSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectIsAuthenticated = state => state.authenticate.isAuthenticated;\nexport const selectCredentials = state => state.authenticate.credentials;\nexport const selectIsSignIn = state => state.authenticate.isSignIn;\nexport const selectResetPassword = state => state.authenticate.resetPassword;\nexport const selectUserId = state => state.authenticate.userId;\nexport default authenticateSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/client/src/slices/authenticate.slice.js"],"names":["createSlice","authenticateSlice","name","initialState","isAuthenticated","isSignIn","resetPassword","userId","credentials","email","password","conirmPassword","reducers","authenticate","state","deauthenticate","setCredentials","action","value","payload","setSignIn","setResetPassword","setUserId","actions","selectIsAuthenticated","selectCredentials","selectIsSignIn","selectResetPassword","selectUserId","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;AAC3CE,EAAAA,IAAI,EAAE,cADqC;AAE3CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,eAAe,EAAE,KADL;AAEZC,IAAAA,QAAQ,EAAE,IAFE;AAGZC,IAAAA,aAAa,EAAE,KAHH;AAIZC,IAAAA,MAAM,EAAE,EAJI;AAKZC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,cAAc,EAAE;AAHL;AALD,GAF6B;AAa3CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAGC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACV,eAAN,GAAwB,IAAxB;AACD,KAHO;AAIRW,IAAAA,cAAc,EAAGD,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACV,eAAN,GAAwB,KAAxB;AACD,KANO;AAORY,IAAAA,cAAc,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACjC,YAAM;AAAEC,QAAAA,KAAF;AAAShB,QAAAA;AAAT,UAAkBe,MAAM,CAACE,OAA/B;AACAL,MAAAA,KAAK,CAACN,WAAN,GAAoB,EAAE,GAAGM,KAAK,CAACN,WAAX;AAAwB,SAACN,IAAD,GAAQgB;AAAhC,OAApB;AACD,KAVO;AAWRE,IAAAA,SAAS,EAAGN,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACT,QAAN,GAAiB,CAACS,KAAK,CAACT,QAAxB;AACD,KAbO;AAcRgB,IAAAA,gBAAgB,EAAGP,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACR,aAAN,GAAsB,CAACQ,KAAK,CAACT,QAA7B;AACD,KAhBO;AAiBRiB,IAAAA,SAAS,EAAE,CAACR,KAAD,EAAQG,MAAR,KAAmB;AAC5BH,MAAAA,KAAK,CAACP,MAAN,GAAeU,MAAM,CAACE,OAAtB;AACD;AAnBO;AAbiC,CAAD,CAArC;AAoCP,OAAO,MAAM;AACXN,EAAAA,YADW;AAEXE,EAAAA,cAFW;AAGXC,EAAAA,cAHW;AAIXK,EAAAA,gBAJW;AAKXD,EAAAA,SALW;AAMXE,EAAAA;AANW,IAOTrB,iBAAiB,CAACsB,OAPf,C,CASP;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAIV,KAAD,IACnCA,KAAK,CAACD,YAAN,CAAmBT,eADd;AAEP,OAAO,MAAMqB,iBAAiB,GAAIX,KAAD,IAAWA,KAAK,CAACD,YAAN,CAAmBL,WAAxD;AACP,OAAO,MAAMkB,cAAc,GAAIZ,KAAD,IAAWA,KAAK,CAACD,YAAN,CAAmBR,QAArD;AACP,OAAO,MAAMsB,mBAAmB,GAAIb,KAAD,IAAWA,KAAK,CAACD,YAAN,CAAmBP,aAA1D;AACP,OAAO,MAAMsB,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACD,YAAN,CAAmBN,MAAnD;AAEP,eAAeN,iBAAiB,CAAC4B,OAAjC","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const authenticateSlice = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    isAuthenticated: false,\n    isSignIn: true,\n    resetPassword: false,\n    userId: \"\",\n    credentials: {\n      email: \"\",\n      password: \"\",\n      conirmPassword: \"\",\n    },\n  },\n  reducers: {\n    authenticate: (state) => {\n      state.isAuthenticated = true;\n    },\n    deauthenticate: (state) => {\n      state.isAuthenticated = false;\n    },\n    setCredentials: (state, action) => {\n      const { value, name } = action.payload;\n      state.credentials = { ...state.credentials, [name]: value };\n    },\n    setSignIn: (state) => {\n      state.isSignIn = !state.isSignIn;\n    },\n    setResetPassword: (state) => {\n      state.resetPassword = !state.isSignIn;\n    },\n    setUserId: (state, action) => {\n      state.userId = action.payload;\n    },\n  },\n});\n\nexport const {\n  authenticate,\n  deauthenticate,\n  setCredentials,\n  setResetPassword,\n  setSignIn,\n  setUserId,\n} = authenticateSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsAuthenticated = (state) =>\n  state.authenticate.isAuthenticated;\nexport const selectCredentials = (state) => state.authenticate.credentials;\nexport const selectIsSignIn = (state) => state.authenticate.isSignIn;\nexport const selectResetPassword = (state) => state.authenticate.resetPassword;\nexport const selectUserId = (state) => state.authenticate.userId;\n\nexport default authenticateSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}