{"ast":null,"code":"/** @format */import{createSlice}from\"@reduxjs/toolkit\";export var formSlice=createSlice({name:\"form\",initialState:{isActive:false,isUrl:false,isValidated:true},reducers:{activateForm:function activateForm(state){state.isActive=true;},activateUrl:function activateUrl(state){state.isUrl=true;},deactivateForm:function deactivateForm(state){state.isActive=false;},deactivateUrl:function deactivateUrl(state){state.isUrl=false;},validateForm:function validateForm(state){state.isValidated=true;},invalidateForm:function invalidateForm(state){state.isValidated=false;}}});var _formSlice$actions=formSlice.actions,activateForm=_formSlice$actions.activateForm,activateUrl=_formSlice$actions.activateUrl,deactivateForm=_formSlice$actions.deactivateForm,deactivateUrl=_formSlice$actions.deactivateUrl,validateForm=_formSlice$actions.validateForm,invalidateForm=_formSlice$actions.invalidateForm;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{activateForm,activateUrl,deactivateForm,deactivateUrl,validateForm,invalidateForm};export var selectIsFormActive=function selectIsFormActive(state){return state.form.isActive;};export var selectIsUrl=function selectIsUrl(state){return state.form.isUrl;};export var selectIsValidated=function selectIsValidated(state){return state.form.isValidated;};export default formSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/client/src/slices/form.slice.js"],"names":["createSlice","formSlice","name","initialState","isActive","isUrl","isValidated","reducers","activateForm","state","activateUrl","deactivateForm","deactivateUrl","validateForm","invalidateForm","actions","selectIsFormActive","form","selectIsUrl","selectIsValidated","reducer"],"mappings":"AAAA,cAEA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAGD,WAAW,CAAC,CACnCE,IAAI,CAAE,MAD6B,CAEnCC,YAAY,CAAE,CACZC,QAAQ,CAAE,KADE,CAEZC,KAAK,CAAE,KAFK,CAGZC,WAAW,CAAE,IAHD,CAFqB,CAOnCC,QAAQ,CAAE,CACRC,YAAY,CAAE,sBAACC,KAAD,CAAW,CACvBA,KAAK,CAACL,QAAN,CAAiB,IAAjB,CACD,CAHO,CAIRM,WAAW,CAAE,qBAACD,KAAD,CAAW,CACtBA,KAAK,CAACJ,KAAN,CAAc,IAAd,CACD,CANO,CAORM,cAAc,CAAE,wBAACF,KAAD,CAAW,CACzBA,KAAK,CAACL,QAAN,CAAiB,KAAjB,CACD,CATO,CAURQ,aAAa,CAAE,uBAACH,KAAD,CAAW,CACxBA,KAAK,CAACJ,KAAN,CAAc,KAAd,CACD,CAZO,CAaRQ,YAAY,CAAE,sBAACJ,KAAD,CAAW,CACvBA,KAAK,CAACH,WAAN,CAAoB,IAApB,CACD,CAfO,CAgBRQ,cAAc,CAAE,wBAACL,KAAD,CAAW,CACzBA,KAAK,CAACH,WAAN,CAAoB,KAApB,CACD,CAlBO,CAPyB,CAAD,CAA7B,C,uBAoCHL,SAAS,CAACc,O,CANZP,Y,oBAAAA,Y,CACAE,W,oBAAAA,W,CACAC,c,oBAAAA,c,CACAC,a,oBAAAA,a,CACAC,Y,oBAAAA,Y,CACAC,c,oBAAAA,c,CAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;0FACA,MAAO,IAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACP,KAAD,QAAWA,CAAAA,KAAK,CAACQ,IAAN,CAAWb,QAAtB,EAA3B,CACP,MAAO,IAAMc,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACT,KAAD,QAAWA,CAAAA,KAAK,CAACQ,IAAN,CAAWZ,KAAtB,EAApB,CACP,MAAO,IAAMc,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACV,KAAD,QAAWA,CAAAA,KAAK,CAACQ,IAAN,CAAWX,WAAtB,EAA1B,CAEP,cAAeL,CAAAA,SAAS,CAACmB,OAAzB","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    isActive: false,\n    isUrl: false,\n    isValidated: true,\n  },\n  reducers: {\n    activateForm: (state) => {\n      state.isActive = true;\n    },\n    activateUrl: (state) => {\n      state.isUrl = true;\n    },\n    deactivateForm: (state) => {\n      state.isActive = false;\n    },\n    deactivateUrl: (state) => {\n      state.isUrl = false;\n    },\n    validateForm: (state) => {\n      state.isValidated = true;\n    },\n    invalidateForm: (state) => {\n      state.isValidated = false;\n    },\n  },\n});\n\nexport const {\n  activateForm,\n  activateUrl,\n  deactivateForm,\n  deactivateUrl,\n  validateForm,\n  invalidateForm,\n} = formSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsFormActive = (state) => state.form.isActive;\nexport const selectIsUrl = (state) => state.form.isUrl;\nexport const selectIsValidated = (state) => state.form.isValidated;\n\nexport default formSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}