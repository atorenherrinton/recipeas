{"ast":null,"code":"/** @format */import{createSlice}from\"@reduxjs/toolkit\";export var recipeSlice=createSlice({name:\"recipe\",initialState:{recipe:{isOpen:false,fullRecipe:{}},recipes:[]},reducers:{loadRecipes:function loadRecipes(state,action){state.recipes=action.payload;},openRecipe:function openRecipe(state,action){state.recipe.isOpen=true;state.recipe.fullRecipe=action.payload;},closeRecipe:function closeRecipe(state){state.recipe.isOpen=false;state.recipe.fullRecipe=\"\";}}});var _recipeSlice$actions=recipeSlice.actions,loadRecipes=_recipeSlice$actions.loadRecipes,openRecipe=_recipeSlice$actions.openRecipe,closeRecipe=_recipeSlice$actions.closeRecipe;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{loadRecipes,openRecipe,closeRecipe};export var selectRecipes=function selectRecipes(state){return state.recipe.recipes;};export var selectRecipe=function selectRecipe(state){return state.recipe.recipe;};export default recipeSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/src/slices/recipe.slice.js"],"names":["createSlice","recipeSlice","name","initialState","recipe","isOpen","fullRecipe","recipes","reducers","loadRecipes","state","action","payload","openRecipe","closeRecipe","actions","selectRecipes","selectRecipe","reducer"],"mappings":"AAAA,cAEA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAGD,WAAW,CAAC,CACrCE,IAAI,CAAE,QAD+B,CAErCC,YAAY,CAAE,CACZC,MAAM,CAAE,CACNC,MAAM,CAAE,KADF,CAENC,UAAU,CAAE,EAFN,CADI,CAKZC,OAAO,CAAE,EALG,CAFuB,CASrCC,QAAQ,CAAE,CACRC,WAAW,CAAE,qBAACC,KAAD,CAAQC,MAAR,CAAmB,CAC9BD,KAAK,CAACH,OAAN,CAAgBI,MAAM,CAACC,OAAvB,CACD,CAHO,CAIRC,UAAU,CAAE,oBAACH,KAAD,CAAQC,MAAR,CAAmB,CAC7BD,KAAK,CAACN,MAAN,CAAaC,MAAb,CAAsB,IAAtB,CACAK,KAAK,CAACN,MAAN,CAAaE,UAAb,CAA0BK,MAAM,CAACC,OAAjC,CACD,CAPO,CAQRE,WAAW,CAAE,qBAACJ,KAAD,CAAW,CACtBA,KAAK,CAACN,MAAN,CAAaC,MAAb,CAAsB,KAAtB,CACAK,KAAK,CAACN,MAAN,CAAaE,UAAb,CAA0B,EAA1B,CACD,CAXO,CAT2B,CAAD,CAA/B,C,yBAwBiDL,WAAW,CAACc,O,CAArDN,W,sBAAAA,W,CAAaI,U,sBAAAA,U,CAAYC,W,sBAAAA,W,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;2CACA,MAAO,IAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACN,KAAD,QAAWA,CAAAA,KAAK,CAACN,MAAN,CAAaG,OAAxB,EAAtB,CACP,MAAO,IAAMU,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACP,KAAD,QAAWA,CAAAA,KAAK,CAACN,MAAN,CAAaA,MAAxB,EAArB,CAEP,cAAeH,CAAAA,WAAW,CAACiB,OAA3B","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState: {\n    recipe: {\n      isOpen: false,\n      fullRecipe: {},\n    },\n    recipes: [],\n  },\n  reducers: {\n    loadRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    openRecipe: (state, action) => {\n      state.recipe.isOpen = true;\n      state.recipe.fullRecipe = action.payload;\n    },\n    closeRecipe: (state) => {\n      state.recipe.isOpen = false;\n      state.recipe.fullRecipe = \"\";\n    },\n  },\n});\n\nexport const { loadRecipes, openRecipe, closeRecipe } = recipeSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectRecipes = (state) => state.recipe.recipes;\nexport const selectRecipe = (state) => state.recipe.recipe;\n\nexport default recipeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}