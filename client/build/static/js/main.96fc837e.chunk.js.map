{"version":3,"sources":["slices/form.slice.js","components/create-button/create-button.component.jsx","components/header/header.component.jsx","firebase/firebase.js","slices/input.slice.js","components/list-item/list-item.component.jsx","components/list/list.styles.jsx","components/list/list.component.jsx","components/recipe-form/recipe-form.styles.jsx","components/recipe-form/recipe-form.component.jsx","components/recipe-url/recipe-url.styles.jsx","components/recipe-url/recipe-url.component.jsx","components/new-recipe/new-recipe.component.jsx","slices/recipe.slice.js","components/getting-started/getting-started.component.jsx","components/dropdown/dropdown.styles.jsx","components/dropdown/dropdown.component.jsx","components/saved-recipe-card/saved-recipe-card.component.jsx","components/ingredient/ingredient.component.jsx","components/full-recipe/full-recipe.component.jsx","components/recipe-list/recipe-list.component.jsx","components/body/body.styles.jsx","components/body/body.component.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["formSlice","createSlice","name","initialState","isActive","isUrl","isValidated","reducers","activateForm","state","activateUrl","deactivateForm","deactivateUrl","validateForm","invalidateForm","actions","selectIsFormActive","form","selectIsUrl","selectIsValidated","CreateButton","dispatch","useDispatch","menuAlign","variant","id","title","Dropdown","Item","onClick","Header","Navbar","fixed","className","bg","expand","Brand","href","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","inputSlice","ingredientExists","ingredient","fractions","allRecipesUrl","fullRecipe","imageUrl","description","ingredients","directions","addIngredient","length","includes","document","querySelector","value","deleteIngredient","action","filter","payload","resetIngredient","resetIngredientExists","setIngredient","Object","entries","key","replace","setHovered","item","isHovered","setUrl","setFullRecipe","clearForm","setAllRecipesUrl","selectIngredient","input","selectIngredients","selectFullRecipe","selectIngredientExists","ListItem","props","ListGroup","Close","style","float","color","cursor","fontSize","ListContainer","styled","div","List","useSelector","map","idx","AlertContainer","ButtonGroupContainer","ButtonContainer","RecipeForm","setTimeout","itemsRef","database","ref","Container","Row","Col","md","Card","as","Body","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","push","Group","Label","Control","onChange","target","type","placeholder","required","Feedback","htmlFor","InputGroup","Prepend","Text","FormControl","aria-describedby","controlid","rows","onKeyPress","aria-label","Append","Button","borderRadius","Add","Alert","RecipeUrl","useState","url","marginTop","fetch","then","res","json","data","result","controlId","NewRecipe","recipeSlice","recipe","isOpen","recipes","loadRecipes","openRecipe","closeRecipe","selectRecipes","selectRecipe","GettingStarted","xl","Title","marginBottom","marginRight","marginLeft","DropdownButton","itemRef","drop","ButtonGroup","width","Toggle","padding","size","Menu","remove","SavedRecipeCard","Img","height","objectFit","src","Ingredient","checked","setChecked","display","textDecoration","Check","FullRecipe","Table","hover","striped","split","step","RecipeList","xs","lg","CardColumns","BodyContainer","isFormActive","App","useEffect","on","snapshot","items","val","newState","configureStore","reducer","inputReducer","formReducer","recipeReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96fc837e.chunk.js","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    isActive: false,\n    isUrl: false,\n    isValidated: true,\n  },\n  reducers: {\n    activateForm: (state) => {\n      state.isActive = true;\n    },\n    activateUrl: (state) => {\n      state.isUrl = true;\n    },\n    deactivateForm: (state) => {\n      state.isActive = false;\n    },\n    deactivateUrl: (state) => {\n      state.isUrl = false;\n    },\n    validateForm: (state) => {\n      state.isValidated = true;\n    },\n    invalidateForm: (state) => {\n      state.isValidated = false;\n    },\n  },\n});\n\nexport const {\n  activateForm,\n  activateUrl,\n  deactivateForm,\n  deactivateUrl,\n  validateForm,\n  invalidateForm,\n} = formSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsFormActive = (state) => state.form.isActive;\nexport const selectIsUrl = (state) => state.form.isUrl;\nexport const selectIsValidated = (state) => state.form.isValidated;\n\nexport default formSlice.reducer;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  activateForm,\n  activateUrl,\n  deactivateUrl,\n} from \"../../slices/form.slice\";\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\n\nconst CreateButton = () => {\n  const dispatch = useDispatch();\n  return (\n    <DropdownButton\n      menuAlign=\"right\"\n      variant=\"outline-primary\"\n      id=\"dropdown-basic-button\"\n      title=\"Create Recipe\"\n    >\n      <Dropdown.Item\n        onClick={() => {\n          dispatch(activateForm());\n          dispatch(activateUrl());\n        }}\n      >\n        allrecipes.com\n      </Dropdown.Item>\n      <Dropdown.Item\n        onClick={() => {\n          dispatch(activateForm());\n          dispatch(deactivateUrl());\n        }}\n      >\n        from scratch\n      </Dropdown.Item>\n    </DropdownButton>\n  );\n};\n\nexport default CreateButton;\n","/** @format */\n\nimport React from \"react\";\nimport { Button, Form, FormControl, Navbar } from \"react-bootstrap\";\nimport CreateButton from \"../create-button/create-button.component\";\n\nconst Header = () => {\n  return (\n    <Navbar\n      fixed=\"top\"\n      className=\"justify-content-between\"\n      bg=\"light\"\n      expand=\"lg\"\n    >\n      <Navbar.Brand href=\"#home\">Recipeas</Navbar.Brand>\n      <CreateButton />\n    </Navbar>\n  );\n};\n\nexport default Header;\n","/** @format */\n\nimport firebase from \"firebase\";\nconst config = {\n  apiKey: \"AIzaSyBB1V0nXw9x3HjcdUEfogIwu9z5pTOSw7w\",\n  authDomain: \"recipeas-89ec5.firebaseapp.com\",\n  databaseURL: \"https://recipeas-89ec5-default-rtdb.firebaseio.com\",\n  projectId: \"recipeas-89ec5\",\n  storageBucket: \"recipeas-89ec5.appspot.com\",\n  messagingSenderId: \"202902121548\",\n  appId: \"1:202902121548:web:c48cf60578762f396318e9\",\n  measurementId: \"G-BTL7T8SJZJ\",\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const inputSlice = createSlice({\n  name: \"input\",\n  initialState: {\n    ingredientExists: false,\n    ingredient: \"\",\n    fractions: {\n      \"1/4\": \"¼\",\n      \"1/3\": \"⅓\",\n      \"1/2\": \"½\",\n      \"2/3\": \"⅔\",\n      \"3/4\": \"¾\",\n    },\n    allRecipesUrl: \"\",\n    fullRecipe: {\n      imageUrl: \"\",\n      title: \"\",\n      description: \"\",\n      ingredients: [],\n      directions: \"\",\n    },\n  },\n  reducers: {\n    addIngredient: (state) => {\n      if (\n        state.ingredient.length > 0 &&\n        !state.fullRecipe.ingredients.includes(state.ingredient)\n      ) {\n        state.fullRecipe.ingredients = [\n          ...state.fullRecipe.ingredients,\n          state.ingredient,\n        ];\n        state.ingredient = \"\";\n      } else if (state.fullRecipe.ingredients.includes(state.ingredient)) {\n        state.ingredientExists = true;\n      }\n      document.querySelector(\"#ingredients\").value = \"\";\n    },\n    deleteIngredient: (state, action) => {\n      state.fullRecipe.ingredients = [\n        ...state.fullRecipe.ingredients.filter(\n          (ingredient) => ingredient !== action.payload\n        ),\n      ];\n    },\n    resetIngredient: (state) => {\n      state.ingredient = \"\";\n    },\n    resetIngredientExists: (state) => {\n      state.ingredientExists = false;\n    },\n    setIngredient: (state, action) => {\n      state.ingredient = action.payload.value;\n      for (const [key, value] of Object.entries(state.fractions)) {\n        if (state.ingredient.includes(key)) {\n          state.ingredient = state.ingredient.replace(key, value);\n        }\n      }\n    },\n    setHovered: (state) => {\n      state.item.isHovered = !state.item.isHovered;\n    },\n    setUrl: (state, action) => {\n      const { value, name } = action.payload;\n      state.fullRecipe = {\n        ...state.fullRecipe,\n        [name]: \"https://\" + value.replace(\"https://\", \"\"),\n      };\n    },\n\n    setFullRecipe: (state, action) => {\n      const { value, name } = action.payload;\n      state.fullRecipe = { ...state.fullRecipe, [name]: value };\n    },\n    clearForm: (state) => {\n      state.ingredient = \"\";\n      state.fullRecipe = {\n        imageUrl: \"\",\n        title: \"\",\n        description: \"\",\n        ingredients: [],\n        directions: \"\",\n      };\n    },\n  },\n});\n\nexport const {\n  addIngredient,\n  deleteIngredient,\n  setAllRecipesUrl,\n  setIngredient,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  setFullRecipe,\n  clearForm,\n} = inputSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIngredient = (state) => state.input.ingredient;\nexport const selectIngredients = (state) => state.input.fullRecipe.ingredients;\nexport const selectFullRecipe = (state) => state.input.fullRecipe;\nexport const selectIngredientExists = (state) => state.input.ingredientExists;\nexport const selectAllRecipesUrl = (state) => state.input.allRecipesUrl;\n\nexport default inputSlice.reducer;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteIngredient } from \"../../slices/input.slice\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Close } from \"@material-ui/icons\";\n\nconst ListItem = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <ListGroup.Item>\n      {props.ingredient}\n      <Close\n        onClick={() => {\n          dispatch(deleteIngredient(props.ingredient));\n        }}\n        style={{ float: \"right\", color: \"#6c757d\", cursor: \"pointer\" }}\n        fontSize=\"small\"\n      />\n    </ListGroup.Item>\n  );\n};\n\nexport default ListItem;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const ButtonContainer = styled.div`\n  float: right;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIngredients } from \"../../slices/input.slice\";\nimport { ListGroup } from \"react-bootstrap\";\nimport ListItem from \"../list-item/list-item.component\";\nimport { ListContainer } from \"./list.styles\";\n\nconst List = () => {\n  const ingredients = useSelector(selectIngredients);\n  return (\n    <ListContainer>\n      <ListGroup variant=\"flush\">\n        {ingredients.map((ingredient, idx) => (\n          <ListItem key={idx} ingredient={ingredient} />\n        ))}\n      </ListGroup>\n    </ListContainer>\n  );\n};\n\nexport default List;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const AlertContainer = styled.div`\n  margin-top: 0.75rem;\n`;\n\nexport const ListContainer = styled.div`\n  margin-top: 0.75rem;\n`;\n\nexport const ButtonGroupContainer = styled.div`\n  float: right;\n  display: flex;\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-right: 0.5rem;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport firebase from \"../../firebase/firebase\";\nimport {\n  addIngredient,\n  setIngredient,\n  setFullRecipe,\n  setUrl,\n  resetIngredient,\n  resetIngredientExists,\n  selectFullRecipe,\n  selectIngredient,\n  selectIngredientExists,\n  clearForm,\n} from \"../../slices/input.slice\";\nimport {\n  deactivateForm,\n  validateForm,\n  invalidateForm,\n  selectIsValidated,\n} from \"../../slices/form.slice\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  InputGroup,\n  Form,\n  FormControl,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport List from \"../list/list.component\";\n\nimport {\n  ButtonGroupContainer,\n  ButtonContainer,\n  AlertContainer,\n  ListContainer,\n} from \"./recipe-form.styles\";\n\nimport { Add } from \"@material-ui/icons\";\n\nconst RecipeForm = () => {\n  const dispatch = useDispatch();\n  const isFormValidated = useSelector(selectIsValidated);\n  const ingredient = useSelector(selectIngredient);\n  const ingredientExists = useSelector(selectIngredientExists);\n  if (ingredientExists) {\n    setTimeout(() => {\n      dispatch(resetIngredient());\n      dispatch(resetIngredientExists());\n    }, 1750);\n  }\n\n  const fullRecipe = useSelector(selectFullRecipe);\n  const itemsRef = firebase.database().ref(\"items\");\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      dispatch(invalidateForm());\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      dispatch(validateForm());\n      itemsRef.push(fullRecipe);\n      dispatch(clearForm());\n      dispatch(deactivateForm());\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col md={8}>\n          <Card>\n            <Card.Header as=\"h5\">New Recipe</Card.Header>\n            <Card.Body>\n              <Form\n                noValidate\n                // validated={!isFormValidated}\n                onSubmit={handleSubmit}\n              >\n                <Form.Group>\n                  <Form.Label>Recipe Name</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    placeholder=\"Add the name of your recipe here\"\n                    name=\"title\"\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter a recipe name.\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <label htmlFor=\"basic-url\">Image URL</label>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"basic-addon3\">\n                      https://\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    onChange={(event) => {\n                      dispatch(setUrl(event.target));\n                    }}\n                    type=\"text\"\n                    name=\"imageUrl\"\n                    id=\"basic-url\"\n                    aria-describedby=\"basic-addon3\"\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter an image URL.\n                  </Form.Control.Feedback>\n                </InputGroup>\n\n                <Form.Group controlid=\"exampleForm.ControlTextarea1\">\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    placeholder=\"Add your description here\"\n                    name=\"description\"\n                    as=\"textarea\"\n                    rows={2}\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter a recipe description.\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <label>Ingredients</label>\n                <InputGroup className=\"mb-1\">\n                  <FormControl\n                    onChange={(event) => {\n                      dispatch(setIngredient(event.target));\n                    }}\n                    onKeyPress={(event) => {\n                      if (event.key === \"Enter\") {\n                        dispatch(addIngredient());\n                      }\n                    }}\n                    id=\"ingredients\"\n                    type=\"text\"\n                    placeholder=\"Add ingredients here\"\n                    name=\"ingredients\"\n                    aria-label=\"Ingredients list\"\n                    aria-describedby=\"basic-addon2\"\n                    value={ingredient}\n                    // required\n                  />\n\n                  <InputGroup.Append>\n                    <Button\n                      style={{ borderRadius: \"0 0.25rem 0.25rem 0\" }}\n                      onClick={() => {\n                        dispatch(addIngredient());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      <Add fontSize=\"small\" />\n                    </Button>\n                  </InputGroup.Append>\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please add at least one ingredient.\n                  </Form.Control.Feedback>\n                </InputGroup>\n                {ingredientExists ? (\n                  <AlertContainer>\n                    <Alert variant=\"warning\">\n                      You've already entered <strong>{ingredient}</strong>\n                    </Alert>\n                  </AlertContainer>\n                ) : null}\n                <ListContainer>\n                  <List />\n                </ListContainer>\n                <Form.Group controlid=\"exampleForm.ControlTextarea3\">\n                  <Form.Label>Directions</Form.Label>\n                  <Form.Control\n                    onChange={(event) => {\n                      dispatch(setFullRecipe(event.target));\n                    }}\n                    type=\"text\"\n                    name=\"directions\"\n                    as=\"textarea\"\n                    rows={8}\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please add the directions\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <ButtonGroupContainer>\n                  <ButtonContainer>\n                    <Button\n                      onClick={() => {\n                        dispatch(validateForm());\n                        dispatch(deactivateForm());\n                        dispatch(clearForm());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonContainer>\n                  <Button variant=\"outline-primary\" type=\"submit\">\n                    Save\n                  </Button>\n                </ButtonGroupContainer>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RecipeForm;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ButtonGroupContainer = styled.div`\n  float: right;\n  display: flex;\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-right: 0.5rem;\n`;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport firebase from \"../../firebase/firebase\";\n\nimport { deactivateUrl, deactivateForm } from \"../../slices/form.slice\";\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\nimport { ButtonContainer, ButtonGroupContainer } from \"./recipe-url.styles\";\n\nconst RecipeUrl = () => {\n  const [url, setUrl] = useState(\"\");\n  const itemsRef = firebase.database().ref(\"items\");\n  const handleChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    const url_req_string =\n      \"https://recipeaz.herokuapp.com/api/\" + \"?url=\" + url;\n    fetch(url_req_string)\n      .then((res) => res.json())\n      .then((data) => {\n        itemsRef.push(data.result);\n      });\n    dispatch(deactivateForm());\n    dispatch(deactivateUrl());\n  };\n\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col md={6}>\n          <Card style={{ marginTop: \"6rem\" }}>\n            <Card.Header as=\"h5\">New recipe</Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Recipe URL</Form.Label>\n                  <Form.Control\n                    onChange={handleChange}\n                    placeholder=\"Enter the URL of the allrecipes.com recipe\"\n                  />\n                </Form.Group>\n\n                <ButtonGroupContainer>\n                  <ButtonContainer>\n                    <Button\n                      onClick={() => {\n                        dispatch(deactivateForm());\n                        dispatch(deactivateUrl());\n                      }}\n                      variant=\"outline-secondary\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonContainer>\n                  <Button type=\"submit\" variant=\"outline-primary\">\n                    Save\n                  </Button>\n                </ButtonGroupContainer>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RecipeUrl;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsUrl } from \"../../slices/form.slice\";\nimport RecipeForm from \"../recipe-form/recipe-form.component\";\nimport RecipeUrl from \"../recipe-url/recipe-url.component\";\n\nconst NewRecipe = () => {\n  const isUrl = useSelector(selectIsUrl);\n  return isUrl ? <RecipeUrl /> : <RecipeForm />;\n};\n\nexport default NewRecipe;\n","/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState: {\n    recipe: {\n      isOpen: false,\n      fullRecipe: {},\n    },\n    recipes: [],\n  },\n  reducers: {\n    loadRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    openRecipe: (state, action) => {\n      state.recipe.isOpen = true;\n      state.recipe.fullRecipe = action.payload;\n    },\n    closeRecipe: (state) => {\n      state.recipe.isOpen = false;\n      state.recipe.fullRecipe = \"\";\n    },\n  },\n});\n\nexport const { loadRecipes, openRecipe, closeRecipe } = recipeSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectRecipes = (state) => state.recipe.recipes;\nexport const selectRecipe = (state) => state.recipe.recipe;\n\nexport default recipeSlice.reducer;\n","/** @format */\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport {\n  activateForm,\n  activateUrl,\n  deactivateUrl,\n} from \"../../slices/form.slice\";\n\nconst GettingStarted = () => {\n  const dispatch = useDispatch();\n  return (\n    <Row className=\"justify-content-center\">\n      <Col md={6} xl={4}>\n        <Card style={{ marginTop: \"6rem\" }} className=\"text-center\">\n          <Card.Header>Getting Started</Card.Header>\n          <Card.Body>\n            <Card.Title style={{ marginBottom: \"0.5rem\" }}>\n              Create New Recipe\n            </Card.Title>\n            <Card.Text style={{ marginBottom: \"1.5rem\" }}>\n              Get started by creating a recipe\n            </Card.Text>\n            <Button\n              variant=\"outline-primary\"\n              onClick={() => {\n                dispatch(activateForm());\n                dispatch(activateUrl());\n              }}\n              style={{ marginRight: \"0.25rem\", marginBottom: \"1rem\" }}\n            >\n              allrecipes.com\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => {\n                dispatch(activateForm());\n                dispatch(deactivateUrl());\n              }}\n              style={{ marginLeft: \"0.25rem\", marginBottom: \"1rem\" }}\n            >\n              from scratch\n            </Button>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default GettingStarted;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const ButtonContainer = styled.div`\n  position: absolute;\n  top: 1.25rem;\n  right: 1.25rem;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { closeRecipe } from \"../../slices/recipe.slice\";\nimport { useDispatch } from \"react-redux\";\nimport firebase from \"../../firebase/firebase\";\nimport { Dropdown, ButtonGroup } from \"react-bootstrap\";\nimport { ButtonContainer } from \"./dropdown.styles\";\n\nconst DropdownButton = (props) => {\n  const dispatch = useDispatch();\n  const itemRef = firebase.database().ref(`/items/${props.id}`);\n  return (\n    <ButtonContainer>\n      <Dropdown drop=\"down\" as={ButtonGroup} style={{ width: \"100%\" }}>\n        <Dropdown.Toggle\n          style={{\n            padding: \".25rem .65rem\",\n          }}\n          variant=\"dark\"\n          size=\"sm\"\n        ></Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={() => {\n              itemRef.remove();\n              dispatch(closeRecipe());\n            }}\n          >\n            Delete Recipe\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </ButtonContainer>\n  );\n};\n\nexport default DropdownButton;\n","/** @format */\n\nimport React from \"react\";\nimport firebase from \"../../firebase/firebase\";\nimport { useDispatch } from \"react-redux\";\nimport { openRecipe } from \"../../slices/recipe.slice\";\nimport { Card, Button } from \"react-bootstrap\";\n\nimport { MoreHoriz } from \"@material-ui/icons\";\nimport DropdownButton from \"../dropdown/dropdown.component\";\n\nconst SavedRecipeCard = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <Card>\n      <DropdownButton id={props.id} />\n      <Card.Img\n        style={{ height: \"20rem\", objectFit: \"cover\" }}\n        variant=\"top\"\n        src={props.imageUrl}\n      />\n\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n\n        <Card.Text>{props.description}</Card.Text>\n\n        <Button\n          style={{ width: \"100%\" }}\n          variant=\"outline-primary\"\n          onClick={() => {\n            dispatch(openRecipe(props));\n          }}\n        >\n          Open Recipe\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default SavedRecipeCard;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst Ingredient = (props) => {\n  const [checked, setChecked] = useState(false);\n\n  const handleClick = () => {\n    setChecked(!checked);\n  };\n  return (\n    <tr>\n      <td\n        style={\n          checked\n            ? {\n                display: \"flex\",\n                textDecoration: \"line-through\",\n              }\n            : { display: \"flex\" }\n        }\n      >\n        <Form.Check onClick={handleClick} type=\"checkbox\" />\n        {props.ingredient}\n      </td>\n    </tr>\n  );\n};\n\nexport default Ingredient;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { closeRecipe } from \"../../slices/recipe.slice\";\nimport { Button, Card, Col, Container, Row, Table } from \"react-bootstrap\";\nimport DropdownButton from \"../dropdown/dropdown.component\";\nimport Ingredient from \"../ingredient/ingredient.component\";\n\nconst FullRecipe = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col xl={7}>\n          <Card>\n            <DropdownButton id={props.id} />\n            <Card.Img\n              style={{ height: \"25rem\", objectFit: \"cover\" }}\n              variant=\"top\"\n              src={props.imageUrl}\n            />\n            <Card.Body>\n              <h4>{props.title}</h4>\n              <p>{props.description}</p>\n              {props.ingredients ? (\n                <Table hover size=\"sm\">\n                  <thead>\n                    <th>Ingredients</th>\n                  </thead>\n                  <tbody>\n                    {props.ingredients.map((ingredient, idx) => (\n                      <Ingredient key={idx} ingredient={ingredient} />\n                    ))}\n                  </tbody>\n                </Table>\n              ) : null}\n              <Table striped size=\"sm\">\n                <thead>\n                  <th>Directions</th>\n                </thead>\n                <tbody>\n                  {props.directions.split(\"\\n\").map((step, idx) => (\n                    <tr>\n                      <td key={idx}>{step}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n\n              <Button\n                style={{ width: \"100%\" }}\n                variant=\"outline-primary\"\n                onClick={() => {\n                  dispatch(closeRecipe());\n                }}\n              >\n                Close Recipe\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default FullRecipe;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectRecipe, selectRecipes } from \"../../slices/recipe.slice\";\nimport { CardColumns, Col, Row } from \"react-bootstrap\";\nimport GettingStarted from \"../getting-started/getting-started.component\";\nimport SavedRecipeCard from \"../saved-recipe-card/saved-recipe-card.component\";\nimport FullRecipe from \"../full-recipe/full-recipe.component\";\n\nconst RecipeList = () => {\n  const recipes = useSelector(selectRecipes);\n  const recipe = useSelector(selectRecipe);\n  return (\n    <Row className=\"justify-content-center\">\n      <Col xs={11} lg={10}>\n        {!recipes.length > 0 ? (\n          <GettingStarted />\n        ) : recipe.isOpen ? (\n          <FullRecipe\n            id={recipe.fullRecipe.id}\n            title={recipe.fullRecipe.title}\n            imageUrl={recipe.fullRecipe.imageUrl}\n            description={recipe.fullRecipe.description}\n            ingredients={recipe.fullRecipe.ingredients}\n            directions={recipe.fullRecipe.directions}\n          />\n        ) : (\n          <CardColumns>\n            {recipes.map((recipe, idx) => (\n              <SavedRecipeCard\n                key={idx}\n                id={recipe.id}\n                title={recipe.title}\n                imageUrl={recipe.imageUrl}\n                description={recipe.description}\n                ingredients={recipe.ingredients}\n                directions={recipe.directions}\n              />\n            ))}\n          </CardColumns>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default RecipeList;\n","/** @format */\n\nimport styled from \"styled-components\";\n\nexport const BodyContainer = styled.div`\n  margin-top: 100px;\n  margin-bottom: 100px;\n`;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsFormActive } from \"../../slices/form.slice\";\nimport NewRecipe from \"../new-recipe/new-recipe.component\";\nimport RecipeList from \"../recipe-list/recipe-list.component\";\nimport { BodyContainer } from \"./body.styles\";\n\nconst Body = () => {\n  const isFormActive = useSelector(selectIsFormActive);\n\n  return (\n    <BodyContainer>\n      {!isFormActive ? <RecipeList /> : <NewRecipe />}\n    </BodyContainer>\n  );\n};\n\nexport default Body;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport Header from \"./components/header/header.component\";\nimport Body from \"./components/body/body.component\";\nimport { useEffect } from \"react\";\nimport firebase from \"./firebase/firebase\";\nimport { loadRecipes } from \"./slices/recipe.slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst App = () => {\n  const dispatch = useDispatch(loadRecipes);\n  useEffect(() => {\n    // Update the document title using the browser API\n    const itemsRef = firebase.database().ref(\"items\");\n    itemsRef.on(\"value\", (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          imageUrl: items[item].imageUrl,\n          description: items[item].description,\n          ingredients: items[item].ingredients,\n          directions: items[item].directions,\n        });\n      }\n      dispatch(loadRecipes(newState));\n    });\n  });\n  return (\n    <div>\n      <Header />\n      <Body />\n    </div>\n  );\n};\n\nexport default App;\n","/** @format */\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport inputReducer from \"../slices/input.slice\";\r\nimport formReducer from \"../slices/form.slice\";\r\nimport recipeReducer from \"../slices/recipe.slice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    input: inputReducer,\r\n    form: formReducer,\r\n    recipe: recipeReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}