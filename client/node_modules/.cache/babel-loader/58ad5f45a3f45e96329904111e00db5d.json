{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    isActive: false,\n    isUrl: false,\n    isValidated: true\n  },\n  reducers: {\n    activateForm: state => {\n      state.isActive = true;\n    },\n    deactivateForm: state => {\n      state.isActive = false;\n    },\n    validateForm: state => {\n      state.isValidated = true;\n    },\n    invalidateForm: state => {\n      state.isValidated = false;\n    },\n    activateIsUrl: state => {\n      state.isUrl = true;\n    }\n  }\n});\nexport const {\n  activateForm,\n  activateIsUrl,\n  deactivateForm,\n  validateForm,\n  invalidateForm\n} = formSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectIsFormActive = state => state.form.isActive;\nexport const selectIsUrl = state => state.form.isUrl;\nexport const selectIsValidated = state => state.form.isValidated;\nexport default formSlice.reducer;","map":{"version":3,"sources":["/Users/atorenherrinton/Development/recipeas/src/slices/form.slice.js"],"names":["createSlice","formSlice","name","initialState","isActive","isUrl","isValidated","reducers","activateForm","state","deactivateForm","validateForm","invalidateForm","activateIsUrl","actions","selectIsFormActive","form","selectIsUrl","selectIsValidated","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,KADE;AAEZC,IAAAA,KAAK,EAAE,KAFK;AAGZC,IAAAA,WAAW,EAAE;AAHD,GAFqB;AAOnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAGC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACL,QAAN,GAAiB,IAAjB;AACD,KAHO;AAIRM,IAAAA,cAAc,EAAGD,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACL,QAAN,GAAiB,KAAjB;AACD,KANO;AAORO,IAAAA,YAAY,EAAGF,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACH,WAAN,GAAoB,IAApB;AACD,KATO;AAURM,IAAAA,cAAc,EAAGH,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACH,WAAN,GAAoB,KAApB;AACD,KAZO;AAaRO,IAAAA,aAAa,EAAGJ,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACD;AAfO;AAPyB,CAAD,CAA7B;AA0BP,OAAO,MAAM;AACXG,EAAAA,YADW;AAEXK,EAAAA,aAFW;AAGXH,EAAAA,cAHW;AAIXC,EAAAA,YAJW;AAKXC,EAAAA;AALW,IAMTX,SAAS,CAACa,OANP,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAIN,KAAD,IAAWA,KAAK,CAACO,IAAN,CAAWZ,QAAjD;AACP,OAAO,MAAMa,WAAW,GAAIR,KAAD,IAAWA,KAAK,CAACO,IAAN,CAAWX,KAA1C;AACP,OAAO,MAAMa,iBAAiB,GAAIT,KAAD,IAAWA,KAAK,CAACO,IAAN,CAAWV,WAAhD;AAEP,eAAeL,SAAS,CAACkB,OAAzB","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const formSlice = createSlice({\n  name: \"form\",\n  initialState: {\n    isActive: false,\n    isUrl: false,\n    isValidated: true,\n  },\n  reducers: {\n    activateForm: (state) => {\n      state.isActive = true;\n    },\n    deactivateForm: (state) => {\n      state.isActive = false;\n    },\n    validateForm: (state) => {\n      state.isValidated = true;\n    },\n    invalidateForm: (state) => {\n      state.isValidated = false;\n    },\n    activateIsUrl: (state) => {\n      state.isUrl = true;\n    },\n  },\n});\n\nexport const {\n  activateForm,\n  activateIsUrl,\n  deactivateForm,\n  validateForm,\n  invalidateForm,\n} = formSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsFormActive = (state) => state.form.isActive;\nexport const selectIsUrl = (state) => state.form.isUrl;\nexport const selectIsValidated = (state) => state.form.isValidated;\n\nexport default formSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}